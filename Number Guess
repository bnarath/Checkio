def checkio(attempts):
    possible_nos = [no for no in range(1,101) if possible_no(no,attempts)[0]]
    guess = possible_nos[0]
    divisor_highest_member_group = {}
    [div,div_highest_member_group_strength_lowest]=[0,101]
    for divisor in range(2,10):
        if divisor not in [attempts[i][0] for i in range(0,len(attempts))]:
            vector=[0 for i in range(divisor)]
            for no in possible_nos:
                vector[no%divisor]+=1
            divisor_highest_member_group[divisor]=max(vector)
            if max(vector) < div_highest_member_group_strength_lowest:
               [div,div_highest_member_group_strength_lowest]=[divisor,max(vector)]
    return [div, guess]

#Returns True if no provides the remainder given in the 2-tuple (remainder,divisor) for all the divisors present in attempts
def possible_no(no,attempts):
    import numpy as np
    return [True if np.sum([1 for step in attempts if no%step[1]==step[0]])==len(attempts) else False] 
if __name__ == '__main__':
    #This part is using only for self-checking and not necessary for auto-testing
    MAX_ATTEMPT = 8

    def initial_referee(data):
        data["attempt_count"] = 0
        data["guess"] = 0
        return data

    def check_solution(func, goal, initial):
        prev_steps = [initial]
        for attempt in range(MAX_ATTEMPT):
            divisor, guess = func(prev_steps[:])
            if guess == goal:
                return True
            if divisor <= 1 or divisor > 10:
                print("You gave wrong divisor range.")
                return False
            if guess < 1 or guess > 100:
                print("You gave wrong guess number range.")
                return False
            prev_steps.append((goal % divisor, divisor))
        print("Too many attempts.")
        return False

    assert check_solution(checkio, 47, (2, 5)), "1st example"
    assert check_solution(checkio, 94, (3, 7)), "2nd example"
    assert check_solution(checkio, 52, (0, 2)), "3rd example"
